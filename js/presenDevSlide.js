var MickrClient, Path, clsMarkdown, ipc, resolvePathFromMarp;

clsMarkdown = require('./classes/mds_markdown');

ipc = require('electron').ipcRenderer;

Path = require('path');

MickrClient = require('../modules/MickrClient');

resolvePathFromMarp = function(path) {
  if (path == null) {
    path = './';
  }
  return Path.resolve(__dirname, '../', path);
};

document.addEventListener('DOMContentLoaded', function() {
  var changeSlide, client, selectedIndex, setting, slideHTML, slideList;
  setting = {
    "id": "presenDevSlide",
    "url": "ws://apps.wisdomweb.net:64260/ws/mik",
    "site": "test",
    "token": "Pad:9948"
  };
  client = new MickrClient(setting);
  changeSlide = function(page) {
    client.send("goToPage", {
      "to": "presenSlide",
      "body": {
        "content": page
      }
    });
    return client.send("changeComment", {
      "to": "presenDevIndex",
      "body": {
        "content": page
      }
    });
  };
  slideHTML = "";
  slideList = [];
  selectedIndex = 0;
  return (function($) {
    var Markdown, applyCurrentPage, applyScreenSize, applySlideSize, getCSSvar, getScreenSize, getSlideSize, render, setImageDirectory, setStyle, themes;
    $("[data-marp-path-resolver]").each(function() {
      var j, len, ref, results, target;
      ref = $(this).attr('data-marp-path-resolver').split(/\s+/);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        target = ref[j];
        results.push($(this).attr(target, resolvePathFromMarp($(this).attr(target))));
      }
      return results;
    });
    Markdown = new clsMarkdown({
      afterRender: clsMarkdown.generateAfterRender($)
    });
    themes = {};
    themes.current = function() {
      return $('#theme-css').attr('href');
    };
    themes["default"] = themes.current();
    themes.apply = function(path) {
      var toApply;
      if (path == null) {
        path = null;
      }
      toApply = resolvePathFromMarp(path || themes["default"]);
      if (toApply !== themes.current()) {
        $('#theme-css').attr('href', toApply);
        setTimeout(applyScreenSize, 20);
        return toApply.match(/([^\/]+)\.css$/)[1];
      }
      return false;
    };
    setStyle = function(identifier, css) {
      var elm, id;
      id = "mds-" + identifier + "Style";
      elm = $("#" + id);
      if (elm.length <= 0) {
        elm = $("<style id=\"" + id + "\"></style>").appendTo(document.head);
      }
      return elm.text(css);
    };
    getCSSvar = function(prop) {
      return document.defaultView.getComputedStyle(document.body).getPropertyValue(prop);
    };
    getSlideSize = function() {
      var size;
      size = {
        w: +getCSSvar('--slide-width'),
        h: +getCSSvar('--slide-height')
      };
      size.ratio = size.w / size.h;
      return size;
    };
    applySlideSize = function(width, height) {
      setStyle('slideSize', "body {\n  --slide-width: " + (width || 'inherit') + ";\n  --slide-height: " + (height || 'inherit') + ";\n}");
      return applyScreenSize();
    };
    getScreenSize = function() {
      var previewMargin, size;
      size = {
        w: document.documentElement.clientWidth,
        h: document.documentElement.clientHeight
      };
      previewMargin = +getCSSvar('--preview-margin');
      size.ratio = (size.w - previewMargin * 2) / (size.h - previewMargin * 2);
      return size;
    };
    applyScreenSize = function() {
      var size;
      size = getScreenSize();
      setStyle('screenSize', "body { --screen-width: " + size.w + "; --screen-height: " + size.h + "; }");
      return $('#container').toggleClass('height-base', size.ratio > getSlideSize().ratio);
    };
    applyCurrentPage = function(page) {
      return setStyle('currentPage', "@media not print {\n  body.slide-view.screen .slide_wrapper:not(:nth-of-type(" + page + ")) {\n    width: 0 !important;\n    height: 0 !important;\n    border: none !important;\n    box-shadow: none !important;\n  }\n}");
    };
    render = function(md) {
      var i, slideOuterHTML, value;
      console.log('call render');
      applySlideSize(md.settings.getGlobal('width'), md.settings.getGlobal('height'));
      md.changedTheme = themes.apply(md.settings.getGlobal('theme'));
      slideOuterHTML = [];
      for (i in slideList) {
        value = slideList[i];
        slideOuterHTML.push(value.outerHTML);
      }
      $('#markdown').html(slideOuterHTML.join(' '));
      $('.slide_wrapper').css('backgroundColor', '');
      $('#1').css('backgroundColor', '#ffe3b4');
      changeSlide(1);
      $('.slide_wrapper').on('click', function() {
        $('.slide_wrapper').css('backgroundColor', '');
        $(this).css('backgroundColor', '#ffe3b4');
        console.log(slideList);
        for (i in slideList) {
          value = slideList[i];
          if (value.id === $(this).attr('id')) {
            selectedIndex = i;
          }
        }
        $("html,body").animate({
          scrollTop: $(this).offset().top
        });
        changeSlide($(this).attr('id'));
        return console.log(selectedIndex);
      });
      ipc.sendToHost('rendered', md);
      if (md.rulerChanged) {
        ipc.sendToHost('rulerChanged', md.rulers);
      }
      if (md.changedTheme) {
        return ipc.sendToHost('themeChanged', md.changedTheme);
      }
    };
    setImageDirectory = function(dir) {
      return $('head > base').attr('href', dir || './');
    };
    ipc.on('render', function(e, md) {
      return render(Markdown.parse(md));
    });
    ipc.on('currentPage', function(e, page) {
      return applyCurrentPage(page);
    });
    ipc.on('setClass', function(e, classes) {
      return $('body').attr('class', classes);
    });
    ipc.on('setImageDirectory', function(e, dir) {
      return setImageDirectory(dir);
    });
    ipc.on('requestPdfOptions', function(e, opts) {
      return sendPdfOptions(opts || {});
    });
    ipc.on('unfreeze', function() {
      return $('body').removeClass('to-pdf');
    });
    $(document).on('click', 'a', function(e) {
      e.preventDefault();
      return ipc.sendToHost('linkTo', $(e.currentTarget).attr('href'));
    });
    $(document).keydown(function(e) {
      var nextPageId, nextPageIndex;
      if (e.keyCode === 38) {
        nextPageIndex = (selectedIndex + (slideList.length - 1)) % slideList.length;
        nextPageId = slideList[nextPageIndex].id;
        $('.slide_wrapper').css('backgroundColor', '');
        $("#" + nextPageId).css('backgroundColor', '#ffe3b4');
        selectedIndex = nextPageIndex;
        console.log(selectedIndex);
        changeSlide(nextPageId);
        $("html,body").animate({
          scrollTop: $("#" + nextPageId).offset().top
        });
      }
      if (e.keyCode === 40) {
        nextPageIndex = (selectedIndex + 1) % slideList.length;
        nextPageId = slideList[nextPageIndex].id;
        $('.slide_wrapper').css('backgroundColor', '');
        $("#" + nextPageId).css('backgroundColor', '#ffe3b4');
        selectedIndex = nextPageIndex;
        console.log(selectedIndex);
        changeSlide(nextPageId);
        return $("html,body").animate({
          scrollTop: $("#" + nextPageId).offset().top
        });
      }
    });
    $(window).resize(function(e) {
      return applyScreenSize();
    });
    applyScreenSize();
    ipc.on('requestSlideInfo', (function(_this) {
      return function() {
        var markdownBody;
        console.log('receive requestSlideInfo');
        markdownBody = document.querySelector('.markdown-body');
        ipc.sendToHost('sendSlideInfo', markdownBody.innerHTML);
        console.log(markdownBody.innerHTML);
        return console.log('send sendSlideInfo');
      };
    })(this));
    ipc.sendToHost('requestSlideHTML', (function(_this) {
      return function() {
        return console.log('send requestSlideHTML');
      };
    })(this));
    ipc.on('setSlide', (function(_this) {
      return function(e, text) {
        console.log('receive setSlide');
        console.log(text);
        slideHTML = text.join("");
        document.querySelector('.markdown-body').innerHTML = slideHTML;
        return $('.slide_wrapper').each(function(idx, elem) {
          return slideList.push(elem);
        });
      };
    })(this));
    $('.markdown-body').sortable({
      'opacity': 0.5
    });
    $('.markdown-body').disableSelection();
    return $(document).on('sortstop', '.markdown-body', function() {
      var i, j, len, tmp;
      tmp = slideList[selectedIndex];
      slideList = [];
      $('.slide_wrapper').each(function(idx, elem) {
        return slideList.push(elem);
      });
      for (j = 0, len = slideList.length; j < len; j++) {
        i = slideList[j];
        if (i === tmp) {
          selectedIndex = slideList.indexOf(i);
        }
      }
      return console.log(selectedIndex);
    });
  })($);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
