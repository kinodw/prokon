var MickrClient, Path, clsMarkdown, ipc, resolvePathFromMarp;

clsMarkdown = require('./classes/mds_markdown');

ipc = require('electron').ipcRenderer;

Path = require('path');

MickrClient = require('../modules/MickrClient');

resolvePathFromMarp = function(path) {
  if (path == null) {
    path = './';
  }
  return Path.resolve(__dirname, '../', path);
};

document.addEventListener('DOMContentLoaded', function() {
  var changeSlide, client, selectedIndex, setting, slideHTML, slideList;
  setting = {
    "id": "presenDevSlide",
    "url": "ws://apps.wisdomweb.net:64260/ws/mik",
    "site": "test",
    "token": "Pad:9948"
  };
  client = new MickrClient(setting);
  changeSlide = function(page) {
    client.send("goToPage", {
      "to": "presenSlide",
      "body": {
        "content": page
      }
    });
    return client.send("changeComment", {
      "to": "presenDevIndex",
      "body": {
        "content": page
      }
    });
  };
  slideHTML = "";
  slideList = [];
  selectedIndex = 0;
  return (function($) {
    var Markdown, applyCurrentPage, applyScreenSize, applySlideSize, getCSSvar, getScreenSize, getSlideSize, render, setImageDirectory, setStyle, themes;
    $("[data-marp-path-resolver]").each(function() {
      var j, len, ref, results, target;
      ref = $(this).attr('data-marp-path-resolver').split(/\s+/);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        target = ref[j];
        results.push($(this).attr(target, resolvePathFromMarp($(this).attr(target))));
      }
      return results;
    });
    Markdown = new clsMarkdown({
      afterRender: clsMarkdown.generateAfterRender($)
    });
    themes = {};
    themes.current = function() {
      return $('#theme-css').attr('href');
    };
    themes["default"] = themes.current();
    themes.apply = function(path) {
      var toApply;
      if (path == null) {
        path = null;
      }
      toApply = resolvePathFromMarp(path || themes["default"]);
      if (toApply !== themes.current()) {
        $('#theme-css').attr('href', toApply);
        setTimeout(applyScreenSize, 20);
        return toApply.match(/([^\/]+)\.css$/)[1];
      }
      return false;
    };
    setStyle = function(identifier, css) {
      var elm, id;
      id = "mds-" + identifier + "Style";
      elm = $("#" + id);
      if (elm.length <= 0) {
        elm = $("<style id=\"" + id + "\"></style>").appendTo(document.head);
      }
      return elm.text(css);
    };
    getCSSvar = function(prop) {
      return document.defaultView.getComputedStyle(document.body).getPropertyValue(prop);
    };
    getSlideSize = function() {
      var size;
      size = {
        w: +getCSSvar('--slide-width'),
        h: +getCSSvar('--slide-height')
      };
      size.ratio = size.w / size.h;
      return size;
    };
    applySlideSize = function(width, height) {
      setStyle('slideSize', "body {\n  --slide-width: " + (width || 'inherit') + ";\n  --slide-height: " + (height || 'inherit') + ";\n}");
      return applyScreenSize();
    };
    getScreenSize = function() {
      var previewMargin, size;
      size = {
        w: document.documentElement.clientWidth,
        h: document.documentElement.clientHeight
      };
      previewMargin = +getCSSvar('--preview-margin');
      size.ratio = (size.w - previewMargin * 2) / (size.h - previewMargin * 2);
      return size;
    };
    applyScreenSize = function() {
      var size;
      size = getScreenSize();
      setStyle('screenSize', "body { --screen-width: " + size.w + "; --screen-height: " + size.h + "; }");
      return $('#container').toggleClass('height-base', size.ratio > getSlideSize().ratio);
    };
    applyCurrentPage = function(page) {
      return setStyle('currentPage', "@media not print {\n  body.slide-view.screen .slide_wrapper:not(:nth-of-type(" + page + ")) {\n    width: 0 !important;\n    height: 0 !important;\n    border: none !important;\n    box-shadow: none !important;\n  }\n}");
    };
    render = function(md) {
      var i, slideOuterHTML, value;
      console.log('call render');
      applySlideSize(md.settings.getGlobal('width'), md.settings.getGlobal('height'));
      md.changedTheme = themes.apply(md.settings.getGlobal('theme'));
      slideOuterHTML = [];
      for (i in slideList) {
        value = slideList[i];
        slideOuterHTML.push(value.outerHTML);
      }
      $('#markdown').html(slideOuterHTML.join(' '));
      $('.slide_wrapper').css('backgroundColor', '');
      $('#1').css('backgroundColor', '#ffe3b4');
      changeSlide(1);
      $('.slide_wrapper').on('click', function() {
        $('.slide_wrapper').css('backgroundColor', '');
        $(this).css('backgroundColor', '#ffe3b4');
        $("html,body").animate({
          scrollTop: $(this).offset().top
        });
        return changeSlide($(this).attr('id'));
      });
      ipc.sendToHost('rendered', md);
      if (md.rulerChanged) {
        ipc.sendToHost('rulerChanged', md.rulers);
      }
      if (md.changedTheme) {
        return ipc.sendToHost('themeChanged', md.changedTheme);
      }
    };
    setImageDirectory = function(dir) {
      return $('head > base').attr('href', dir || './');
    };
    ipc.on('render', function(e, md) {
      return render(Markdown.parse(md));
    });
    ipc.on('currentPage', function(e, page) {
      return applyCurrentPage(page);
    });
    ipc.on('setClass', function(e, classes) {
      return $('body').attr('class', classes);
    });
    ipc.on('setImageDirectory', function(e, dir) {
      return setImageDirectory(dir);
    });
    ipc.on('requestPdfOptions', function(e, opts) {
      return sendPdfOptions(opts || {});
    });
    ipc.on('unfreeze', function() {
      return $('body').removeClass('to-pdf');
    });
    $(document).on('click', 'a', function(e) {
      e.preventDefault();
      return ipc.sendToHost('linkTo', $(e.currentTarget).attr('href'));
    });
    $(document).keydown(function(e) {
      var nextPageId, nextPageIndex;
      if (e.keyCode === 38) {
        console.log('up key');
        nextPageIndex = (selectedIndex + (slideList.length - 1)) % slideList.length;
        nextPageId = slideList[nextPageIndex].id;
        console.log('next id = ' + nextPageId);
        $('.slide_wrapper').css('backgroundColor', '');
        $("#" + nextPageId).css('backgroundColor', '#ffe3b4');
        selectedIndex = nextPageIndex;
        changeSlide(nextPageId);
        $("html,body").animate({
          scrollTop: $("#" + nextPageId).offset().top
        });
      }
      if (e.keyCode === 40) {
        console.log('down key');
        nextPageIndex = (selectedIndex + 1) % slideList.length;
        nextPageId = slideList[nextPageIndex].id;
        console.log('next id = ' + nextPageId);
        $('.slide_wrapper').css('backgroundColor', '');
        $("#" + nextPageId).css('backgroundColor', '#ffe3b4');
        selectedIndex = nextPageIndex;
        changeSlide(nextPageId);
        return $("html,body").animate({
          scrollTop: $("#" + nextPageId).offset().top
        });
      }
    });
    $(window).resize(function(e) {
      return applyScreenSize();
    });
    applyScreenSize();
    ipc.on('requestSlideInfo', (function(_this) {
      return function() {
        var markdownBody;
        console.log('receive requestSlideInfo');
        markdownBody = document.querySelector('.markdown-body');
        ipc.sendToHost('sendSlideInfo', markdownBody.innerHTML);
        console.log(markdownBody.innerHTML);
        return console.log('send sendSlideInfo');
      };
    })(this));
    ipc.sendToHost('requestSlideHTML', (function(_this) {
      return function() {
        return console.log('send requestSlideHTML');
      };
    })(this));
    ipc.on('setSlide', (function(_this) {
      return function(e, text) {
        console.log('receive setSlide');
        console.log(text);
        slideHTML = text.join("");
        document.querySelector('.markdown-body').innerHTML = slideHTML;
        return $('.slide_wrapper').each(function(idx, elem) {
          return slideList.push(elem);
        });
      };
    })(this));
    $('.markdown-body').sortable({
      'opacity': 0.5
    });
    $('.markdown-body').disableSelection();
    return $(document).on('sortstop', '.markdown-body', function() {
      console.log('sort finished');
      slideList = [];
      return $('.slide_wrapper').each(function(idx, elem) {
        return slideList.push(elem);
      });
    });
  })($);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuRGV2U2xpZGUuanMiLCJzb3VyY2VzIjpbInByZXNlbkRldlNsaWRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFdBQUEsR0FBYyxPQUFBLENBQVEsd0JBQVI7O0FBQ2QsR0FBQSxHQUFjLE9BQUEsQ0FBUSxVQUFSLENBQW1CLENBQUM7O0FBQ2xDLElBQUEsR0FBYyxPQUFBLENBQVEsTUFBUjs7QUFDZCxXQUFBLEdBQWMsT0FBQSxDQUFRLHdCQUFSOztBQUVkLG1CQUFBLEdBQXNCLFNBQUMsSUFBRDs7SUFBQyxPQUFPOztTQUFTLElBQUksQ0FBQyxPQUFMLENBQWEsU0FBYixFQUF3QixLQUF4QixFQUErQixJQUEvQjtBQUFqQjs7QUFFdEIsUUFBUSxDQUFDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxTQUFBO0FBQzVDLE1BQUE7RUFBQSxPQUFBLEdBQ0M7SUFBQSxJQUFBLEVBQU0sZ0JBQU47SUFDQSxLQUFBLEVBQU8sc0NBRFA7SUFFQSxNQUFBLEVBQVEsTUFGUjtJQUdBLE9BQUEsRUFBUyxVQUhUOztFQUlELE1BQUEsR0FBUyxJQUFJLFdBQUosQ0FBZ0IsT0FBaEI7RUFFVCxXQUFBLEdBQWMsU0FBQyxJQUFEO0lBQ1osTUFBTSxDQUFDLElBQVAsQ0FBWSxVQUFaLEVBQXdCO01BQ3RCLElBQUEsRUFBTSxhQURnQjtNQUV0QixNQUFBLEVBQ0U7UUFBQSxTQUFBLEVBQVcsSUFBWDtPQUhvQjtLQUF4QjtXQUtBLE1BQU0sQ0FBQyxJQUFQLENBQVksZUFBWixFQUE2QjtNQUMzQixJQUFBLEVBQU0sZ0JBRHFCO01BRTNCLE1BQUEsRUFDRTtRQUFBLFNBQUEsRUFBVyxJQUFYO09BSHlCO0tBQTdCO0VBTlk7RUFjZCxTQUFBLEdBQVk7RUFDWixTQUFBLEdBQVk7RUFFWixhQUFBLEdBQWdCO1NBRWIsQ0FBQSxTQUFDLENBQUQ7QUFFRCxRQUFBO0lBQUEsQ0FBQSxDQUFFLDJCQUFGLENBQThCLENBQUMsSUFBL0IsQ0FB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LENBQW1CLENBQUMsUUFBcEIsQ0FBNkI7TUFDM0IsU0FBQSxFQUFXLEdBRGdCO0tBQTdCO0lBR0EsQ0FBQSxDQUFFLGdCQUFGLENBQW1CLENBQUMsZ0JBQXBCLENBQUE7V0FDQSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsRUFBWixDQUFlLFVBQWYsRUFBMkIsZ0JBQTNCLEVBQTZDLFNBQUE7TUFDM0MsT0FBTyxDQUFDLEdBQVIsQ0FBWSxlQUFaO01BRUEsU0FBQSxHQUFZO2FBQ1osQ0FBQSxDQUFFLGdCQUFGLENBQW1CLENBQUMsSUFBcEIsQ0FBeUIsU0FBQyxHQUFELEVBQU0sSUFBTjtlQUN4QixTQUFTLENBQUMsSUFBVixDQUFlLElBQWY7TUFEd0IsQ0FBekI7SUFKMkMsQ0FBN0M7RUFwTEMsQ0FBQSxDQUFILENBQUksQ0FBSjtBQTNCNEMsQ0FBOUMiLCJzb3VyY2VzQ29udGVudCI6WyJjbHNNYXJrZG93biA9IHJlcXVpcmUgJy4vY2xhc3Nlcy9tZHNfbWFya2Rvd24nXG5pcGMgICAgICAgICA9IHJlcXVpcmUoJ2VsZWN0cm9uJykuaXBjUmVuZGVyZXJcblBhdGggICAgICAgID0gcmVxdWlyZSAncGF0aCdcbk1pY2tyQ2xpZW50ID0gcmVxdWlyZSAnLi4vbW9kdWxlcy9NaWNrckNsaWVudCdcblxucmVzb2x2ZVBhdGhGcm9tTWFycCA9IChwYXRoID0gJy4vJykgLT4gUGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLycsIHBhdGgpXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJ0RPTUNvbnRlbnRMb2FkZWQnLCAtPlxuICBzZXR0aW5nID1cbiAgIFwiaWRcIjogXCJwcmVzZW5EZXZTbGlkZVwiXG4gICBcInVybFwiOiBcIndzOi8vYXBwcy53aXNkb213ZWIubmV0OjY0MjYwL3dzL21pa1wiXG4gICBcInNpdGVcIjogXCJ0ZXN0XCJcbiAgIFwidG9rZW5cIjogXCJQYWQ6OTk0OFwiXG4gIGNsaWVudCA9IG5ldyBNaWNrckNsaWVudChzZXR0aW5nKTtcblxuICBjaGFuZ2VTbGlkZSA9IChwYWdlKSAtPlxuICAgIGNsaWVudC5zZW5kIFwiZ29Ub1BhZ2VcIiwge1xuICAgICAgXCJ0b1wiOiBcInByZXNlblNsaWRlXCIsXG4gICAgICBcImJvZHlcIjpcbiAgICAgICAgXCJjb250ZW50XCI6IHBhZ2VcbiAgICB9XG4gICAgY2xpZW50LnNlbmQgXCJjaGFuZ2VDb21tZW50XCIsIHtcbiAgICAgIFwidG9cIjogXCJwcmVzZW5EZXZJbmRleFwiLFxuICAgICAgXCJib2R5XCI6XG4gICAgICAgIFwiY29udGVudFwiOiBwYWdlXG4gICAgfVxuXG5cblxuICBzbGlkZUhUTUwgPSBcIlwiXG4gIHNsaWRlTGlzdCA9IFtdXG4gICMgc2xpZGVMaXN044Gu5L2V55Wq55uu44Gu6KaB57Sg44GM54++5Zyo6YG45oqe44GV44KM44Gm44GE44KL44GLXG4gIHNlbGVjdGVkSW5kZXggPSAwXG5cbiAgZG8gKCQpIC0+XG4gICAgIyBGaXJzdCwgcmVzb2x2ZSBNYXJwIHJlc291cmNlcyBwYXRoXG4gICAgJChcIltkYXRhLW1hcnAtcGF0aC1yZXNvbHZlcl1cIikuZWFjaCAtPlxuICAgICAgZm9yIHRhcmdldCBpbiAkKEApLmF0dHIoJ2RhdGEtbWFycC1wYXRoLXJlc29sdmVyJykuc3BsaXQoL1xccysvKVxuICAgICAgICAkKEApLmF0dHIodGFyZ2V0LCByZXNvbHZlUGF0aEZyb21NYXJwKCQoQCkuYXR0cih0YXJnZXQpKSlcblxuICAgIE1hcmtkb3duID0gbmV3IGNsc01hcmtkb3duKHsgYWZ0ZXJSZW5kZXI6IGNsc01hcmtkb3duLmdlbmVyYXRlQWZ0ZXJSZW5kZXIoJCkgfSlcblxuICAgIHRoZW1lcyA9IHt9XG4gICAgdGhlbWVzLmN1cnJlbnQgPSAtPiAkKCcjdGhlbWUtY3NzJykuYXR0cignaHJlZicpXG4gICAgdGhlbWVzLmRlZmF1bHQgPSB0aGVtZXMuY3VycmVudCgpXG4gICAgdGhlbWVzLmFwcGx5ID0gKHBhdGggPSBudWxsKSAtPlxuICAgICAgdG9BcHBseSA9IHJlc29sdmVQYXRoRnJvbU1hcnAocGF0aCB8fCB0aGVtZXMuZGVmYXVsdClcblxuICAgICAgaWYgdG9BcHBseSBpc250IHRoZW1lcy5jdXJyZW50KClcbiAgICAgICAgJCgnI3RoZW1lLWNzcycpLmF0dHIoJ2hyZWYnLCB0b0FwcGx5KVxuICAgICAgICBzZXRUaW1lb3V0IGFwcGx5U2NyZWVuU2l6ZSwgMjBcblxuICAgICAgICByZXR1cm4gdG9BcHBseS5tYXRjaCgvKFteXFwvXSspXFwuY3NzJC8pWzFdXG4gICAgICBmYWxzZVxuXG4gICAgc2V0U3R5bGUgPSAoaWRlbnRpZmllciwgY3NzKSAtPlxuICAgICAgaWQgID0gXCJtZHMtI3tpZGVudGlmaWVyfVN0eWxlXCJcbiAgICAgIGVsbSA9ICQoXCIjI3tpZH1cIilcbiAgICAgIGVsbSA9ICQoXCI8c3R5bGUgaWQ9XFxcIiN7aWR9XFxcIj48L3N0eWxlPlwiKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKSBpZiBlbG0ubGVuZ3RoIDw9IDBcbiAgICAgIGVsbS50ZXh0KGNzcylcblxuICAgIGdldENTU3ZhciA9IChwcm9wKSAtPiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpLmdldFByb3BlcnR5VmFsdWUocHJvcClcblxuICAgIGdldFNsaWRlU2l6ZSA9IC0+XG4gICAgICBzaXplID1cbiAgICAgICAgdzogK2dldENTU3ZhciAnLS1zbGlkZS13aWR0aCdcbiAgICAgICAgaDogK2dldENTU3ZhciAnLS1zbGlkZS1oZWlnaHQnXG5cbiAgICAgIHNpemUucmF0aW8gPSBzaXplLncgLyBzaXplLmhcbiAgICAgIHNpemVcblxuICAgIGFwcGx5U2xpZGVTaXplID0gKHdpZHRoLCBoZWlnaHQpIC0+XG4gICAgICBzZXRTdHlsZSAnc2xpZGVTaXplJyxcbiAgICAgICAgXCJcIlwiXG4gICAgICAgIGJvZHkge1xuICAgICAgICAgIC0tc2xpZGUtd2lkdGg6ICN7d2lkdGggfHwgJ2luaGVyaXQnfTtcbiAgICAgICAgICAtLXNsaWRlLWhlaWdodDogI3toZWlnaHQgfHwgJ2luaGVyaXQnfTtcbiAgICAgICAgfVxuICAgICAgICBcIlwiXCJcbiAgICAgIGFwcGx5U2NyZWVuU2l6ZSgpXG5cbiAgICBnZXRTY3JlZW5TaXplID0gLT5cbiAgICAgIHNpemUgPVxuICAgICAgICB3OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgaDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgICBwcmV2aWV3TWFyZ2luID0gK2dldENTU3ZhciAnLS1wcmV2aWV3LW1hcmdpbidcbiAgICAgIHNpemUucmF0aW8gPSAoc2l6ZS53IC0gcHJldmlld01hcmdpbiAqIDIpIC8gKHNpemUuaCAtIHByZXZpZXdNYXJnaW4gKiAyKVxuICAgICAgc2l6ZVxuXG4gICAgYXBwbHlTY3JlZW5TaXplID0gLT5cbiAgICAgIHNpemUgPSBnZXRTY3JlZW5TaXplKClcbiAgICAgIHNldFN0eWxlICdzY3JlZW5TaXplJywgXCJib2R5IHsgLS1zY3JlZW4td2lkdGg6ICN7c2l6ZS53fTsgLS1zY3JlZW4taGVpZ2h0OiAje3NpemUuaH07IH1cIlxuICAgICAgJCgnI2NvbnRhaW5lcicpLnRvZ2dsZUNsYXNzICdoZWlnaHQtYmFzZScsIHNpemUucmF0aW8gPiBnZXRTbGlkZVNpemUoKS5yYXRpb1xuXG4gICAgIyDjg5rjg7zjgrjnlarlj7fjgpLlj5fjgZHlj5bjgaPjgZ/jgYLjgajjgIHnj77lnKjjga7jg5rjg7zjgrjku6XlpJbjga7jg5rjg7zjgrjjga7jgrnjg6njgqTjg4njgpLpnZ7ooajnpLrjgavjgZnjgotcbiAgICAjIOOBn+OBoOOBl+OAgemdnuODl+ODquODs+ODiOeKtuaFi+OBruaZgumZkOWumlxuICAgIGFwcGx5Q3VycmVudFBhZ2UgPSAocGFnZSkgLT5cbiAgICAgIHNldFN0eWxlICdjdXJyZW50UGFnZScsXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBAbWVkaWEgbm90IHByaW50IHtcbiAgICAgICAgICBib2R5LnNsaWRlLXZpZXcuc2NyZWVuIC5zbGlkZV93cmFwcGVyOm5vdCg6bnRoLW9mLXR5cGUoI3twYWdlfSkpIHtcbiAgICAgICAgICAgIHdpZHRoOiAwICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBoZWlnaHQ6IDAgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcIlwiXCJcbiAgICAjIHByZXNlbkRldueUu+mdouOBp+OBr+OBr+OBmOOCgeOBq+S4gOWbnuOBoOOBkeWRvOOBsOOCjOOCi1xuICAgIHJlbmRlciA9IChtZCkgLT5cbiAgICAgIGNvbnNvbGUubG9nICdjYWxsIHJlbmRlcidcbiAgICAgIGFwcGx5U2xpZGVTaXplIG1kLnNldHRpbmdzLmdldEdsb2JhbCgnd2lkdGgnKSwgbWQuc2V0dGluZ3MuZ2V0R2xvYmFsKCdoZWlnaHQnKVxuICAgICAgbWQuY2hhbmdlZFRoZW1lID0gdGhlbWVzLmFwcGx5IG1kLnNldHRpbmdzLmdldEdsb2JhbCgndGhlbWUnKVxuICAgICAgIyAkKCcjbWFya2Rvd24nKS5odG1sKHNsaWRlSFRNTClcblxuICAgICAgIyBzbGlkZUxpc3TopoHntKDjgZ3jgozjgZ7jgozjgYvjgolvdXRlckhUTUzjgpLlj5bjgorlh7rjgZfjg6rjgrnjg4jjgavmoLzntI1cbiAgICAgIHNsaWRlT3V0ZXJIVE1MID0gW11cbiAgICAgIGZvciBpLCB2YWx1ZSBvZiBzbGlkZUxpc3RcbiAgICAgICAgc2xpZGVPdXRlckhUTUwucHVzaCB2YWx1ZS5vdXRlckhUTUxcblxuICAgICAgJCgnI21hcmtkb3duJykuaHRtbChzbGlkZU91dGVySFRNTC5qb2luKCcgJykpXG5cbiAgICAgICMg44Gv44GY44KB44Gu44K544Op44Kk44OJ44Gu6Imy44KS5aSJ44GI44Gm44GK44GN44CB44Gd44Gu44Oa44O844K444GM6YG45oqe44GV44KM44Gm44GE44KL44GT44Go44KS56S644GZXG4gICAgICAkKCcuc2xpZGVfd3JhcHBlcicpLmNzcygnYmFja2dyb3VuZENvbG9yJywgJycpXG4gICAgICAkKCcjMScpLmNzcygnYmFja2dyb3VuZENvbG9yJywgJyNmZmUzYjQnKVxuICAgICAgY2hhbmdlU2xpZGUoMSlcblxuICAgICAgIyDmirzjgZXjgozjgZ9zbGlkZV93cmFwcGVy44GuaWTjgpLpgIHkv6HjgZfjgabjg5rjg7zjgrjpgbfnp7tcbiAgICAgICQoJy5zbGlkZV93cmFwcGVyJykub24gJ2NsaWNrJywgKCkgLT5cbiAgICAgICAgIyDpgbjmip7jgZXjgozjgZ/jgrnjg6njgqTjg4njga7oibLjgpLlpInmm7TjgZfjgIHjgIDjg5rjg7zjgrjpgbfnp7vjgZXjgZvjgotcbiAgICAgICAgJCgnLnNsaWRlX3dyYXBwZXInKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsICcnKVxuICAgICAgICAkKHRoaXMpLmNzcygnYmFja2dyb3VuZENvbG9yJywgJyNmZmUzYjQnKVxuICAgICAgICAkKFwiaHRtbCxib2R5XCIpLmFuaW1hdGUoe3Njcm9sbFRvcDokKHRoaXMpLm9mZnNldCgpLnRvcH0pO1xuICAgICAgICAjIOODmuODvOOCuOenu+WLleODoeODg+OCu+ODvOOCuOmAgeS/oVxuICAgICAgICAjaXBjLnNlbmRUb0hvc3QgJ2dvVG9QYWdlJywgJCh0aGlzKS5hdHRyKCdpZCcpXG4gICAgICAgIGNoYW5nZVNsaWRlKCQodGhpcykuYXR0cignaWQnKSlcblxuICAgICAgaXBjLnNlbmRUb0hvc3QgJ3JlbmRlcmVkJywgbWRcbiAgICAgIGlwYy5zZW5kVG9Ib3N0ICdydWxlckNoYW5nZWQnLCBtZC5ydWxlcnMgaWYgbWQucnVsZXJDaGFuZ2VkXG4gICAgICBpcGMuc2VuZFRvSG9zdCAndGhlbWVDaGFuZ2VkJywgbWQuY2hhbmdlZFRoZW1lIGlmIG1kLmNoYW5nZWRUaGVtZVxuICAgIHNldEltYWdlRGlyZWN0b3J5ID0gKGRpcikgLT4gJCgnaGVhZCA+IGJhc2UnKS5hdHRyKCdocmVmJywgZGlyIHx8ICcuLycpXG5cbiAgICBpcGMub24gJ3JlbmRlcicsIChlLCBtZCkgLT4gcmVuZGVyKE1hcmtkb3duLnBhcnNlKG1kKSlcbiAgICBpcGMub24gJ2N1cnJlbnRQYWdlJywgKGUsIHBhZ2UpIC0+IGFwcGx5Q3VycmVudFBhZ2UgcGFnZVxuICAgIGlwYy5vbiAnc2V0Q2xhc3MnLCAoZSwgY2xhc3NlcykgLT4gJCgnYm9keScpLmF0dHIgJ2NsYXNzJywgY2xhc3Nlc1xuICAgIGlwYy5vbiAnc2V0SW1hZ2VEaXJlY3RvcnknLCAoZSwgZGlyKSAtPiBzZXRJbWFnZURpcmVjdG9yeShkaXIpXG4gICAgaXBjLm9uICdyZXF1ZXN0UGRmT3B0aW9ucycsIChlLCBvcHRzKSAtPiBzZW5kUGRmT3B0aW9ucyhvcHRzIHx8IHt9KVxuICAgIGlwYy5vbiAndW5mcmVlemUnLCAtPiAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ3RvLXBkZicpXG5cblxuXG4gICAgIyBJbml0aWFsaXplXG4gICAgJChkb2N1bWVudCkub24gJ2NsaWNrJywgJ2EnLCAoZSkgLT5cbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgaXBjLnNlbmRUb0hvc3QgJ2xpbmtUbycsICQoZS5jdXJyZW50VGFyZ2V0KS5hdHRyKCdocmVmJylcblxuICAgICQoZG9jdW1lbnQpLmtleWRvd24gKGUpIC0+XG4gICAgICBpZiBlLmtleUNvZGUgPT0gMzhcbiAgICAgICAgY29uc29sZS5sb2cgJ3VwIGtleSdcbiAgICAgICAgbmV4dFBhZ2VJbmRleCA9IChzZWxlY3RlZEluZGV4ICsgKHNsaWRlTGlzdC5sZW5ndGgtMSkpICUgc2xpZGVMaXN0Lmxlbmd0aFxuICAgICAgICBuZXh0UGFnZUlkICAgID0gc2xpZGVMaXN0W25leHRQYWdlSW5kZXhdLmlkXG4gICAgICAgIGNvbnNvbGUubG9nICduZXh0IGlkID0gJyArIG5leHRQYWdlSWRcbiAgICAgICAgJCgnLnNsaWRlX3dyYXBwZXInKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsICcnKVxuICAgICAgICAkKFwiIyN7bmV4dFBhZ2VJZH1cIikuY3NzKCdiYWNrZ3JvdW5kQ29sb3InLCAnI2ZmZTNiNCcpXG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSBuZXh0UGFnZUluZGV4XG4gICAgICAgICNpcGMuc2VuZFRvSG9zdCAnZ29Ub1BhZ2UnLCBuZXh0UGFnZUlkXG4gICAgICAgIGNoYW5nZVNsaWRlKG5leHRQYWdlSWQpXG4gICAgICAgICQoXCJodG1sLGJvZHlcIikuYW5pbWF0ZSh7c2Nyb2xsVG9wOiQoXCIjI3tuZXh0UGFnZUlkfVwiKS5vZmZzZXQoKS50b3B9KTtcblxuICAgICAgaWYgZS5rZXlDb2RlID09IDQwXG4gICAgICAgIGNvbnNvbGUubG9nICdkb3duIGtleSdcbiAgICAgICAgbmV4dFBhZ2VJbmRleCA9IChzZWxlY3RlZEluZGV4ICsgMSkgJSBzbGlkZUxpc3QubGVuZ3RoXG4gICAgICAgIG5leHRQYWdlSWQgICAgPSBzbGlkZUxpc3RbbmV4dFBhZ2VJbmRleF0uaWRcbiAgICAgICAgY29uc29sZS5sb2cgJ25leHQgaWQgPSAnICsgbmV4dFBhZ2VJZFxuICAgICAgICAkKCcuc2xpZGVfd3JhcHBlcicpLmNzcygnYmFja2dyb3VuZENvbG9yJywgJycpXG4gICAgICAgICQoXCIjI3tuZXh0UGFnZUlkfVwiKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsICcjZmZlM2I0JylcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IG5leHRQYWdlSW5kZXhcbiAgICAgICAgI2lwYy5zZW5kVG9Ib3N0ICdnb1RvUGFnZScsIG5leHRQYWdlSWRcbiAgICAgICAgY2hhbmdlU2xpZGUobmV4dFBhZ2VJZClcbiAgICAgICAgJChcImh0bWwsYm9keVwiKS5hbmltYXRlKHtzY3JvbGxUb3A6JChcIiMje25leHRQYWdlSWR9XCIpLm9mZnNldCgpLnRvcH0pO1xuXG4gICAgJCh3aW5kb3cpLnJlc2l6ZSAoZSkgLT4gYXBwbHlTY3JlZW5TaXplKClcbiAgICBhcHBseVNjcmVlblNpemUoKVxuXG5cbiAgICAjIHByZXNlbnRhdGlvbiA9PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGlwYy5vbiAncmVxdWVzdFNsaWRlSW5mbycsICgpID0+XG4gICAgICBjb25zb2xlLmxvZyAncmVjZWl2ZSByZXF1ZXN0U2xpZGVJbmZvJ1xuICAgICAgbWFya2Rvd25Cb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hcmtkb3duLWJvZHknKVxuICAgICAjIGNvbnNvbGUubG9nIG1hcmtkb3duQm9keS5pbm5lckhUTUxcbiAgICAgIGlwYy5zZW5kVG9Ib3N0ICdzZW5kU2xpZGVJbmZvJywgbWFya2Rvd25Cb2R5LmlubmVySFRNTFxuICAgICAgY29uc29sZS5sb2cgbWFya2Rvd25Cb2R5LmlubmVySFRNTFxuICAgICAgY29uc29sZS5sb2cgJ3NlbmQgc2VuZFNsaWRlSW5mbydcblxuICAgIGlwYy5zZW5kVG9Ib3N0ICdyZXF1ZXN0U2xpZGVIVE1MJywgKCkgPT5cbiAgICAgIGNvbnNvbGUubG9nICdzZW5kIHJlcXVlc3RTbGlkZUhUTUwnXG5cbiAgICBpcGMub24gJ3NldFNsaWRlJywgKGUsIHRleHQpID0+XG4gICAgICBjb25zb2xlLmxvZyAncmVjZWl2ZSBzZXRTbGlkZSdcbiAgICAgIGNvbnNvbGUubG9nIHRleHRcbiAgICAgIHNsaWRlSFRNTCA9IHRleHQuam9pbihcIlwiKVxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hcmtkb3duLWJvZHknKS5pbm5lckhUTUwgPSBzbGlkZUhUTUxcbiAgICAgICMgc2xpZGVMaXN0IOOBuHB1c2hcbiAgICAgICQoJy5zbGlkZV93cmFwcGVyJykuZWFjaCAoaWR4LCBlbGVtKSAtPlxuICAgICAgICAjIEhUTUxPYmplY3TjgpJwdXNoXG4gICAgICAgIHNsaWRlTGlzdC5wdXNoIGVsZW1cblxuICAgICMgc2xpZGUgc29ydFxuICAgICQoJy5tYXJrZG93bi1ib2R5Jykuc29ydGFibGUge1xuICAgICAgJ29wYWNpdHknOiAwLjVcbiAgICB9XG4gICAgJCgnLm1hcmtkb3duLWJvZHknKS5kaXNhYmxlU2VsZWN0aW9uKClcbiAgICAkKGRvY3VtZW50KS5vbiAnc29ydHN0b3AnLCAnLm1hcmtkb3duLWJvZHknLCAoKSAtPlxuICAgICAgY29uc29sZS5sb2cgJ3NvcnQgZmluaXNoZWQnXG4gICAgICAjIHNsaWRlTGlzdCB1cGRhdGVcbiAgICAgIHNsaWRlTGlzdCA9IFtdXG4gICAgICAkKCcuc2xpZGVfd3JhcHBlcicpLmVhY2ggKGlkeCwgZWxlbSkgLT5cbiAgICAgICBzbGlkZUxpc3QucHVzaCBlbGVtXG5cblxuXG5cbiJdfQ==
