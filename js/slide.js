var Path, clsMarkdown, ipc, resolvePathFromMarp;

clsMarkdown = require('./classes/mds_markdown');

ipc = require('electron').ipcRenderer;

Path = require('path');

resolvePathFromMarp = function(path) {
  if (path == null) {
    path = './';
  }
  return Path.resolve(__dirname, '../', path);
};

document.addEventListener('DOMContentLoaded', function() {
  var $;
  $ = window.jQuery = window.$ = require('jquery');
  return (function($) {
    var Markdown, applyCurrentPage, applyScreenSize, applySlideSize, getCSSvar, getScreenSize, getSlideSize, render, sendPdfOptions, setImageDirectory, setStyle, themes;
    $("[data-marp-path-resolver]").each(function() {
      var i, len, ref, results, target;
      ref = $(this).attr('data-marp-path-resolver').split(/\s+/);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        target = ref[i];
        results.push($(this).attr(target, resolvePathFromMarp($(this).attr(target))));
      }
      return results;
    });
    Markdown = new clsMarkdown({
      afterRender: clsMarkdown.generateAfterRender($)
    });
    themes = {};
    themes.current = function() {
      return $('#theme-css').attr('href');
    };
    themes["default"] = themes.current();
    themes.apply = function(path) {
      var toApply;
      if (path == null) {
        path = null;
      }
      toApply = resolvePathFromMarp(path || themes["default"]);
      if (toApply !== themes.current()) {
        $('#theme-css').attr('href', toApply);
        setTimeout(applyScreenSize, 20);
        return toApply.match(/([^\/]+)\.css$/)[1];
      }
      return false;
    };
    setStyle = function(identifier, css) {
      var elm, id;
      id = "mds-" + identifier + "Style";
      elm = $("#" + id);
      if (elm.length <= 0) {
        elm = $("<style id=\"" + id + "\"></style>").appendTo(document.head);
      }
      return elm.text(css);
    };
    getCSSvar = function(prop) {
      return document.defaultView.getComputedStyle(document.body).getPropertyValue(prop);
    };
    getSlideSize = function() {
      var size;
      size = {
        w: +getCSSvar('--slide-width'),
        h: +getCSSvar('--slide-height')
      };
      size.ratio = size.w / size.h;
      return size;
    };
    applySlideSize = function(width, height) {
      setStyle('slideSize', "body {\n  --slide-width: " + (width || 'inherit') + ";\n  --slide-height: " + (height || 'inherit') + ";\n}");
      return applyScreenSize();
    };
    getScreenSize = function() {
      var previewMargin, size;
      size = {
        w: document.documentElement.clientWidth,
        h: document.documentElement.clientHeight
      };
      previewMargin = +getCSSvar('--preview-margin');
      size.ratio = (size.w - previewMargin * 2) / (size.h - previewMargin * 2);
      return size;
    };
    applyScreenSize = function() {
      var size;
      size = getScreenSize();
      setStyle('screenSize', "body { --screen-width: " + size.w + "; --screen-height: " + size.h + "; }");
      return $('#container').toggleClass('height-base', size.ratio > getSlideSize().ratio);
    };
    applyCurrentPage = function(page) {
      return setStyle('currentPage', "@media not print {\n  body.slide-view.screen .slide_wrapper:not(:nth-of-type(" + page + ")) {\n    width: 0 !important;\n    height: 0 !important;\n    border: none !important;\n    box-shadow: none !important;\n  }\n}");
    };
    render = function(md) {
      applySlideSize(md.settings.getGlobal('width'), md.settings.getGlobal('height'));
      md.changedTheme = themes.apply(md.settings.getGlobal('theme'));
      $('#markdown').html(md.parsed);
      ipc.sendToHost('rendered', md);
      if (md.rulerChanged) {
        ipc.sendToHost('rulerChanged', md.rulers);
      }
      if (md.changedTheme) {
        return ipc.sendToHost('themeChanged', md.changedTheme);
      }
    };
    sendPdfOptions = function(opts) {
      var slideSize;
      slideSize = getSlideSize();
      opts.exportSize = {
        width: Math.floor(slideSize.w * 25400 / 96),
        height: Math.floor(slideSize.h * 25400 / 96)
      };
      $('body').addClass('to-pdf');
      return setTimeout((function() {
        return ipc.sendToHost('responsePdfOptions', opts);
      }), 0);
    };
    setImageDirectory = function(dir) {
      return $('head > base').attr('href', dir || './');
    };
    ipc.on('render', function(e, md) {
      return render(Markdown.parse(md));
    });
    ipc.on('currentPage', function(e, page) {
      return applyCurrentPage(page);
    });
    ipc.on('setClass', function(e, classes) {
      return $('body').attr('class', classes);
    });
    ipc.on('setImageDirectory', function(e, dir) {
      return setImageDirectory(dir);
    });
    ipc.on('requestPdfOptions', function(e, opts) {
      return sendPdfOptions(opts || {});
    });
    ipc.on('unfreeze', function() {
      return $('body').removeClass('to-pdf');
    });
    $(document).on('click', 'a', function(e) {
      e.preventDefault();
      return ipc.sendToHost('linkTo', $(e.currentTarget).attr('href'));
    });
    $(window).resize(function(e) {
      return applyScreenSize();
    });
    applyScreenSize();
    ipc.on('requestSlideInfo', (function(_this) {
      return function() {
        var markdownBody;
        console.log('receive requestSlideInfo');
        markdownBody = [];
        $('.slide_wrapper').each(function(idx, elem) {
          return markdownBody.push(elem.outerHTML);
        });
        console.log(markdownBody);
        ipc.sendToHost('sendSlideInfo', markdownBody);
        return console.log('send sendSlideInfo');
      };
    })(this));
    ipc.sendToHost('requestSlideHTML', (function(_this) {
      return function() {
        return console.log('send requestSlideHTML');
      };
    })(this));
    ipc.on('setSlide', (function(_this) {
      return function(e, text) {
        console.log('receive setSlide');
        console.log(text);
        return console.log($('.markdown-body').html(text));
      };
    })(this));
    return ipc.on('goToPage', (function(_this) {
      return function(e, page) {
        console.log(page);
        return applyCurrentPage(page);
      };
    })(this));
  })($);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
