var BrowserWindow, MainMenu, MdsPresenDevWindow, MdsPresenWindow, MdsWindow, MickrClient, MickrWindow, Path, Tray, app, arg, break_arg, client, dialog, electron, exist, fs, globalShortcut, ipc, j, len, mickrWin, opts, powerSaveBlocker, presenDevWin, presenWin, ref, ref1, resolved_file, setting, slideInfo, tray, tray2, win;

global.marp || (global.marp = {
  config: require('./classes/mds_config'),
  development: false
});

ref = require('electron'), BrowserWindow = ref.BrowserWindow, app = ref.app, dialog = ref.dialog;

Path = require('path');

MdsWindow = require('./classes/mds_window');

MdsPresenWindow = require('./classes/mds_presen_window');

MdsPresenDevWindow = require('./classes/mds_presen_dev_window');

MainMenu = require('./classes/mds_main_menu');

exist = require('./classes/mds_file').exist;

electron = require('electron');

ipc = electron.ipcMain;

MickrWindow = require('../MickrWindow.js');

MickrClient = require('../modules/MickrClient');

Tray = electron.Tray;

globalShortcut = electron.globalShortcut;

powerSaveBlocker = electron.powerSaveBlocker;

fs = require('fs');

setting = {
  "id": "main",
  "url": "ws://apps.wisdomweb.net:64260/ws/mik",
  "site": "test",
  "token": "Pad:9948"
};

client = new MickrClient(setting);

slideInfo = "";

presenDevWin = null;

win = null;

mickrWin = null;

presenWin = null;

tray = null;

tray2 = null;

global.marp.config.initialize();

opts = {
  file: null
};

ref1 = process.argv.slice(1);
for (j = 0, len = ref1.length; j < len; j++) {
  arg = ref1[j];
  break_arg = false;
  switch (arg) {
    case '--development':
    case '--dev':
      global.marp.development = true;
      break;
    default:
      if (exist(resolved_file = Path.resolve(arg))) {
        opts.file = resolved_file;
        break_arg = true;
      }
  }
  if (break_arg) {
    break;
  }
}

app.on('window-all-closed', function() {
  if (process.platform !== 'darwin' || !!MdsWindow.appWillQuit) {
    return app.quit();
  }
});

app.on('before-quit', function() {
  return MdsWindow.appWillQuit = true;
});

app.on('activate', function(e, hasVisibleWindows) {
  if (app.isReady() && !hasVisibleWindows) {
    return new MdsWindow;
  }
});

app.on('open-file', function(e, path) {
  e.preventDefault();
  opts.fileOpened = true;
  return MdsWindow.loadFromFile(path, null);
});

app.on('ready', function() {
  mickrWin = new MickrWindow();
  mickrWin.activateMainWindows();
  tray = new Tray(Path.join(__dirname, '../', 'lib', 'img', 'cloud_on.png'));
  tray.on('click', (function(_this) {
    return function(e) {
      return mickrWin.switchShowMode(tray);
    };
  })(this));
  tray2 = new Tray(Path.join(__dirname, '../', 'lib', 'img', 'ic_pause_black_24dp_2x.png'));
  tray2.on('click', (function(_this) {
    return function(e) {
      return mickrWin.switchPause();
    };
  })(this));
  global.marp.mainMenu = new MainMenu({
    development: global.marp.development
  });
  if (!opts.fileOpened) {
    if (opts.file) {
      return MdsWindow.loadFromFile(opts.file, null);
    } else {
      return win = new MdsWindow;
    }
  }
});

ipc.on('textSend', (function(_this) {
  return function(e, text) {
    var displays, electronScreen, externalDisplay, i, idx, input, k, len1, nonHTML, value;
    console.log('receive textSend');
    _this.presenDevWin = new MdsPresenDevWindow({}, {}, text);
    electronScreen = electron.screen;
    displays = electronScreen.getAllDisplays();
    externalDisplay = null;
    for (k = 0, len1 = displays.length; k < len1; k++) {
      i = displays[k];
      if (i.bounds.x !== 0 || i.bounds.y !== 0) {
        externalDisplay = i;
        break;
      }
    }
    if (externalDisplay) {
      _this.presenWin = new MdsPresenWindow({
        x: externalDisplay.bounds.x + 50,
        y: externalDisplay.bounds.y + 50
      });
    } else {
      _this.presenWin = new MdsPresenWindow({
        width: 800,
        height: 600
      });
    }
    _this.slideInfo = text;
    nonHTML = [];
    for (idx in text) {
      value = text[idx];
      nonHTML[idx] = value.replace(/<(".*?"|'.*?'|[^'"])*?>/gi, " ");
      nonHTML[idx] = nonHTML[idx].replace(/\n/gi, "");
      nonHTML[idx] = nonHTML[idx].replace(/\s+/gi, "");
      nonHTML[idx] = nonHTML[idx].substr(0, nonHTML[idx].length - 1);
    }
    console.log(nonHTML);
    nonHTML = nonHTML.join("");
    console.log(nonHTML);
    input = [];
    return input.push(nonHTML);
  };
})(this));

ipc.on('loadUsedSlide', function() {
  var args;
  console.log('receive loadUsedSlide');
  args = [
    {
      title: 'Open',
      filters: [
        {
          name: 'Markdown files',
          extensions: ['md', 'mdown']
        }, {
          name: 'Text file',
          extensions: ['txt']
        }, {
          name: 'All files',
          extensions: ['*']
        }
      ],
      properties: ['openFile', 'createDirectory']
    }, function(fnames) {
      if (fnames == null) {
        return;
      }
      return win.browserWindow.webContents.send('sendUsedSlidePath', fnames[0]);
    }
  ];
  return dialog.showOpenDialog.apply(win, args);
});

ipc.on('goToPage', (function(_this) {
  return function(e, page) {
    console.log(page);
    return win.browserWindow.webContents.send('goToPage', page);
  };
})(this));

ipc.on('PdfExport', (function(_this) {
  return function() {
    console.log('PDF Export');
    return win.trigger('exportPdfDialog');
  };
})(this));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
